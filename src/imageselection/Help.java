/*
 * Help.java Refer to "Fast and Enhanced Algorithm for Examplar Based Image Inpainting" Copyright (C) 2010-2011 Sapan
 * Diwakar and Pulkit Goyal DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. This program is free software:
 * you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any later version. This program is
 * distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should
 * have received a copy of the GNU General Public License along with this program. If not, see
 * <http://www.gnu.org/licenses/>. Please contact Sapan Diwakar or Pulkit Goyal diwakar.sapan@gmail.com or
 * pulkit110@gmail.com or visit <http://sapandiwakar.wordpress.com> or <http://pulkitgoyal.wordpress.com> if you need
 * any additional information or have any questions.
 */

package imageselection;

/**
 * @author Pulkit
 */
public class Help extends javax.swing.JFrame {

	/** Creates new form Help */
	public Help() {
		initComponents();
		setTitle("Image Inpainting Help"); // Set the title of the Window
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTextPane1 = new javax.swing.JTextPane();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jTextPane1.setEditable(false);
		jTextPane1
				.setText("Image inpainting Copyright (C) 2010-201, Sapan Diwakar and Pulkit Goyal\nThis program comes with ABSOLUTELY NO WARRANTY.\nThis is free software, and you are welcome to redistribute it under certain conditions.\n\nInpainting is easy. Just follow these steps to guide you through the inpainting process.  \n1. Open an image: Go to File. Click on Open. Alternatively click on the toolbar icon for opening an image. You can also press Ctrl^O to open an image.\n2. Select the region to be inpainted/removed from your image. Just click on the border points of the region that you want to select and watch as the points are automatically interpolated to enclose a bounding polygon once you reach back to the start point. For better results, try not to leave any portion of the image that you want to remove and select curved regions (Avoid pointed edges.). Select as many regions as you want. No need for the regions to be spatially connected. \n3. Start Inpainting by selecting Inpaint -> Inpaint or Inpaint -> Fast Inpaint or choose the toolbar icon.\n4. You can watch as the selected region is removed from the image.\n5. While inpainting you could also stop the process in between by clicking on the pause inpaint toolbar icon.\n6. When inpainting is completed, you would see a message box to confirm the same. \n7. Save or Save As your Image by selecting the appropriate option from the menu bar or the tool box. \n8. Enjoy Inpainting.  ");
		jScrollPane1.setViewportView(jTextPane1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322,
				Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args
	 *            the command line arguments
	 */
	/*
	 * public static void main(String args[]) {
	 * java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new
	 * Help().setVisible(true); } }); }
	 */

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextPane jTextPane1;
	// End of variables declaration//GEN-END:variables

}
